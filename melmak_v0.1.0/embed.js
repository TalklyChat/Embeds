!function(){const t=document.currentScript;t&&t.dataset&&(window.apiToken=t.dataset.apiToken||"",window.predefinedQuestions=t.dataset.predefinedQs?JSON.parse(t.dataset.predefinedQs):[],window.welcomeMessage=t.dataset.welcome||"Witaj! Jak mogę Ci pomóc?",window.chatbotName=t.dataset.botName||"AI",window.placeX=t.dataset.placeX||"right");const e=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})),n=()=>Date.now(),s=()=>new Intl.DateTimeFormat(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1}).format(new Date);function i(t){const e=["A","STRONG","BR"],n=/^(https?:)?\/\//i,s=document.createElement("template");return s.innerHTML=t,s.content.querySelectorAll("*").forEach((t=>{const s=t.nodeName;e.includes(s)?([...t.attributes].forEach((e=>{const i=e.name.toLowerCase();if(i.startsWith("on"))t.removeAttribute(e.name);else{if("A"===s&&"href"===i){const e=(t=>{const e=document.createElement("textarea");return e.innerHTML=t,e.value})((t.getAttribute("href")??"").trim());return n.test(e)?void t.setAttribute("href",e):void t.replaceWith(document.createTextNode(t.textContent))}t.removeAttribute(e.name)}})),"A"===s&&(t.setAttribute("rel","noopener noreferrer"),t.setAttribute("target","_blank"))):t.replaceWith(...t.childNodes)})),s.innerHTML}function a(t){return i(t.replace(/(https?:\/\/[^\s]+)/g,(t=>{const e=t.replace(/[.,;:!?)\]\}]+$/,"");return`<a href="${e}">${e}</a>`+t.slice(e.length)})).replace(/\*\*(.+?)\*\*/g,"<strong>$1</strong>").replace(/\n/g,"<br>"))}const o=document.createElement("div"),r=o.attachShadow({mode:"closed"});document.body.append(o);const l=new class{KEY="chat_hist_v2";CID="chat_cid_v2";#t(t=this.#e()){return t.filter((t=>n()-t.ts<36e5))}#e(){return JSON.parse(localStorage.getItem(this.KEY)||"[]")}#n(t){localStorage.setItem(this.KEY,JSON.stringify(t))}add(t,e,s){const i=this.#t().slice(-99);i.push({s:t,m:e,ts:n(),t:s}),this.#n(i)}list(){return this.#t()}clear(){localStorage.removeItem(this.KEY)}cid(){let t=localStorage.getItem(this.CID);return t||(t=e(),localStorage.setItem(this.CID,t)),t}reset(){this.clear(),localStorage.setItem(this.CID,e())}},d=new class{constructor(t,e){this.endpoint=t,this.store=e,this.ctrl=null}async ask(t,e,n,s){this.ctrl?.abort(),this.ctrl=new AbortController;const i=await fetch(this.endpoint,{method:"POST",signal:this.ctrl.signal,headers:{"Content-Type":"application/json","X-API-KEY":e||"","X-Conversation-ID":this.store.cid()},body:JSON.stringify({question:t,company:n})});if(!i.ok){const t=await i.text();let e=`Błąd ${i.status}`;try{const n=JSON.parse(t);n?.message&&(e=n.message)}catch(t){}throw new Error(e)}const a=i.body.getReader(),o=new TextDecoder;for(;;){const{done:t,value:e}=await a.read();if(t)break;s(o.decode(e))}}}("https://talkly.chat/api/chatbot/get-answer",l);new class{constructor(t,e,n,s,i){this.$=t,this.store=e,this.service=n,this.bot=s,this.placeX=i}init(){this.render(),this.cache(),this.bind(),this.restore(),this.msgs.children.length||this.welcome()}render(){const t=(window.predefinedQuestions?.slice(0,2)||[]).map((t=>`\n                <button class="block text-left border border-black/30 bg-gray-100 text-gray-700 text-sm rounded-xl py-2 px-3 hover:bg-gray-200 duration-300 focus:outline-none mb-2">\n                  ${t}\n                </button>`)).join(""),e=document.createElement("link");e.rel="stylesheet",e.href="https://cdn.jsdelivr.net/gh/TalklyChat/Embeds@main/melmak_v0.0.8/talkly.css",r.append(e),this.$.innerHTML+=`\n<button id="chat-toggle-button"\n  class="fixed border border-white/70 bottom-10 ${this.placeX}-4 bg-black text-white rounded-full p-2 shadow-lg hover:scale-105 transition-transform duration-300">\n  <img class="w-12 p-2" src="https://cdn.jsdelivr.net/gh/TalklyChat/Embeds@main/chat_ico_default.svg" alt="ico" />\n</button>\n\n<div id="mainChatContainer"\n  class="transition-all duration-500 ease-in-out transform translate-x-[120%] flex flex-col w-full md:w-[440px] 3xl:w-[600px] h-[83vh] xl:h-[73vh] 3xl:h-[64vh] fixed bottom-4 ${this.placeX}-0 md:${this.placeX}-4 border rounded-md rounded-t-3xl bg-white hidden">\n\n  \x3c!-- Header --\x3e\n  <div class="bg-black rounded-t-3xl py-4 px-6 relative">\n    <div class="flex items-center justify-between">\n      <div class="flex items-center space-x-4">\n        <div>\n          <h2 class="font-bold text-white text-lg">${this.bot}</h2>\n          <p class="text-white/60 text-xs tracking-wide">powered by <a href="https://talkly.chat" class="text-underline">talkly.chat</a></p>\n        </div>\n      </div>\n      <div class="flex items-center space-x-1">\n        <button class="clearChatStorage p-2 hover:bg-white/5 rounded-full transition-all duration-300">\n          <svg xmlns="http://www.w3.org/2000/svg"\n            class="w-5 h-5 text-white/60 hover:text-white transition-colors duration-300"\n            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"\n            stroke-linecap="round" stroke-linejoin="round">\n            <path d="M3 6h18M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />\n          </svg>\n        </button>\n        <button class="closeChat p-2 hover:bg-white/5 rounded-full transition-all duration-300">\n          <svg xmlns="http://www.w3.org/2000/svg"\n            class="w-5 h-5 text-white/60 hover:text-white transition-colors duration-300"\n            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"\n            stroke-linecap="round" stroke-linejoin="round">\n            <path d="M18 6L6 18M6 6l12 12" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Messages --\x3e\n  <div id="messagesContainer" class="messages-container"></div>\n\n  \x3c!-- Predefined + input --\x3e\n  <div class="mt-auto">\n    <div id="predefined-questions" class="px-4 py-2 bg-white">\n      ${t}\n    </div>\n\n    <div class="px-4 py-2 bg-white border-t rounded-b-lg">\n      <form id="chatForm" class="flex items-center justify-center w-full space-x-2">\n            <textarea\n                 rows="1"\n                  class="flex w-full rounded-md border border-white bg-transparent\n                         px-3 py-2 text-base md:text-sm placeholder-[#6b7280] text-[#030712]\n                         focus:ring-0 focus:outline-none focus:border-white\n                         resize-none overflow-hidden disabled:cursor-not-allowed disabled:opacity-50 min-h-[30px]"\n                  placeholder="Wiadomość..."\n                  minlength="3"\n                  maxlength="300"></textarea>\n        <button type="submit" class="w-6">\n          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"\n            class="size-6 text-black">\n            <path\n              d="M3.478 2.404a.75.75 0 0 0-.926.941l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.404Z" />\n          </svg>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>`}cache(){this.toggle=this.$.getElementById("chat-toggle-button"),this.panel=this.$.getElementById("mainChatContainer"),this.msgs=this.$.getElementById("messagesContainer"),this.form=this.$.getElementById("chatForm"),this.input=this.form?.querySelector("textarea"),this.clear=this.$.querySelector(".clearChatStorage"),this.close=this.$.querySelector(".closeChat"),this.predef=this.$.getElementById("predefined-questions")}bind(){if(this.toggle?.addEventListener("click",(()=>this.open())),this.close?.addEventListener("click",(t=>this.open(t))),this.clear?.addEventListener("click",(t=>{t.stopPropagation(),this.store.reset(),this.msgs.innerHTML="",this.predef.style.display="block",this.welcome()})),this.input){const t=()=>{this.input.style.height="auto",this.input.style.height=this.input.scrollHeight+"px"};t(),this.input.addEventListener("input",t),this.autoGrow=t}this.form?.addEventListener("submit",(t=>{t.preventDefault();const e=this.input.value.trim();if(e.length<3)return;const n=s();this.input.value="",this.autoGrow(),this.append("user",a(e),n),this.store.add("Ty",e,n),this.predef.style.display="none",this.ask(e)})),this.input?.addEventListener("keypress",(t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.form.dispatchEvent(new Event("submit")))})),this.predef?.querySelectorAll("button").forEach((t=>t.addEventListener("click",(()=>{this.input.value=t.textContent.trim(),this.predef.style.display="none",this.form.dispatchEvent(new Event("submit"))}))))}open(t){t&&(t.preventDefault(),t.stopPropagation()),this.panel.classList.toggle("hidden"),this.panel.classList.toggle("translate-x-[120%]"),setTimeout((()=>this.down(!0)),10),this.input.focus()}down(t){this.msgs.scrollTo({top:this.msgs.scrollHeight,behavior:t?"auto":"smooth"})}append(t,e,n,s=!0){const i="ai"===t,a=s?"bg-white border border-gray-200 space-y-3 p-3":"bg-white p-3",o=document.createElement("div");o.className=i?"w-11/12 mx-auto flex gap-x-2 mt-4 chat-message":"flex w-11/12 mx-auto gap-x-2 me-4 mt-4 chat-message";const r=i?`<img class="inline-block h-10 rounded-full"\n             src="https://cdn.jsdelivr.net/gh/TalklyChat/Embeds@main/avatar_melmak.webp" alt="Avatar">\n       <div>\n         <div class="${a} rounded-2xl">\n           <p class="leading-relaxed text-sm text-gray-800">${e}</p>\n         </div>\n         <span class="mt-1.5 flex items-center gap-x-1 text-xs text-gray-500">\n            <svg class="shrink-0 w-3" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                            <path d="M18 6 7 17l-5-5"></path>\n                            <path d="m22 10-7.5 7.5L13 16"></path>\n                        </svg>\n           <span style="font-size:10px" class="mt-1">${n}</span>\n         </span>\n       </div>`:`<div class="grow text-end space-y-3">\n         <div class="inline-flex flex-col justify-end">\n           <div class="inline-block bg-black rounded-2xl p-3 shadow-sm">\n             <p class="text-sm text-white text-left">${e}</p>\n           </div>\n           <span class="mt-1.5 ms-auto flex items-center gap-x-1 text-xs text-gray-500">\n               <svg class="shrink-0 w-3" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                            <path d="M18 6 7 17l-5-5"></path>\n                            <path d="m22 10-7.5 7.5L13 16"></path>\n                        </svg>\n             <span style="font-size:10px" class="mt-1">${n}</span>\n           </span>\n         </div>\n       </div>\n       <span class="shrink-0 inline-flex items-center justify-center w-10 h-10 rounded-full bg-gray-600">\n         <span class="text-sm font-medium text-white leading-none">Ty</span>\n       </span>`;return o.innerHTML=r,this.msgs.append(o),this.down(),o.querySelector("p")}restore(){const t=this.store.list();for(const e of t)this.append("AI"===e.s?"ai":"user",a(e.m),e.t);t.length&&(this.predef.style.display="none")}welcome(){this.append("ai",a(window.welcomeMessage),s())}async ask(t){const e=s(),n=this.append("ai",'<div class="typing-indicator"><span></span><span></span><span></span></div>',e,!1),i=n.parentElement;let o=!1,r="";try{await this.service.ask(t,window.apiToken,window.chatbotName||"AI",(t=>{if(r+=t,n.innerHTML=a(r),!o){i.classList.add("border","border-gray-200","space-y-3");const t=i.querySelector(".typing-indicator");t&&t.remove(),o=!0}this.down()})),this.store.add("AI",r,e)}catch(t){console.error(t);let e="❌ Błąd serwera, spróbuj ponownie.";t?.message&&(e=`❌ ${t.message}`);const s=i.querySelector(".typing-indicator");s&&s.remove(),i.classList.add("border","border-gray-200","space-y-3"),n.innerHTML=a(e)}}}(r,l,d,window.chatbotName||"AI",window.placeX).init()}();
